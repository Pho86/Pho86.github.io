{
    "title": "Tenryou",
    "projectname": "tenryou",
    "description": "Genshin Impact companion website helping players visualize up-to-date information from the game, along with a teambuilder utilizing Google's Gemini.",
    "link": "/projects/tenryou",
    "github":"https://github.com/pho86/Tenryou",
    "external":"https://tenryou.live",
    "mockup": "/mockup.webp",
    "tags": ["Next.js", "TypeScript",  "Vercel AI SDK", "Gemini", "Tailwind CSS", "Cypress"],
    "brief": "Tenryou is a companion website create for the action-rpg, Genshin Impact. Tenryou is intended to help players view information from the game in a visual and cohesive manner via information pulled from various resources providing up-to-date information with a teambuilder to help users create an ideal team.",
    "briefImage": "/characters.png",
    "process": "For Tenryou, api's were used from various sources based around the game Genshin Impact, such as genshin-db, enka.network, and ambr.top, pulling the latest information created by other developers. Furthermore, to allow the teambuilder to be used, I used both Gemini and OpenAI to test them out, and decided to stay with Gemini because it was often more consistent in following the prompt and with the more recent characters because Gemini had more access to google, while OpenAI is trained on older data, I created for the team that was needed to be created and had more success with using vercel's AI sdk. Vercel's AI SDKs, I found ran better with Gemini because with serverless and edge functions to ensure the application was the most cost effective because running it on the client would cause more strain and would often time out because the request would often run too long and end up not finishing the prompt generation. ",
    "processImage": "/teamcard.png",
    "outcomeImage": "/outcome.png",
    "conclusion": "A challenge I faced, was pulling together all the information together and figuring out how each api used their data and combining each other to expand onto each other. Furthermore, splitting up the prompt for the AI to ensure the AI doesn't run too long as with Vercel server actions are limited, so by splitting the prompt into multiple sections it allows the AI to continously run and build up the prompt and display an amount of information that is substantial. "
}